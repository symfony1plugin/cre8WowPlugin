<?php


/**
 * Skeleton subclass for representing a row from the 'wow_character' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.0-dev on:
 *
 * sob, 6 mar 2010, 20:39:10
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class WowCharacter extends BaseWowCharacter {

  protected $wowCharacterItemSlots = null;
  protected $translationTable = array(
      0 =>  'Head',
      1 =>  'Neck',
      2 =>  'Shoulders',
      3 =>  'Shirt',
      4 =>  'Chest',
      5 =>  'Waist',
      6 =>  'Legs',
      7 =>  'Feet',
      8 =>  'Wrist',
      9 =>  'Hand',
      10 => 'Finger1',
      11 => 'Finger2',
      12 => 'Trinket1',
      13 => 'Trinket2',
      14 => 'Back',
      15 => 'MainHand',
      16 => 'OffHand',
      17 => 'CustomWeapon'
  );

  /**
   *
   * @return WowCharacterClassSpec Returns WowCharacterClassSpec object or null.
   */
  public function setClassSpecByArmory($armorySpecData) {
    if(!$armorySpecData) return null;
    foreach($this->getWowCharacterClassSpecs() as $wowCharacterClassSpec) {
      $wowCharacterClassSpec->delete();
    }

    $characterSpec = new WowCharacterClassSpec();
    $characterSpec->setWowCharacter($this);
    $characterSpec->setWowClassSpec(WowClassSpecQuery::create()->filterByWowClassId($this->getWowClassId())->filterByName($armorySpecData['mainTree'])->findOne());
    $characterSpec->setIsActive($armorySpecData['isActive']);
    $characterSpec->save();

    return $characterSpec;
  }

  public function deleteGuildMemberships() {
    foreach($this->getWowGuildMembers() as $wowGuildMember) {
      $wowGuildMember->delete();
    }
  }

  public function getItems() {
    return $this->wowCharacterItemSlots ? $this->wowCharacterItemSlots : $this->_getItems();
  }

  public function getItemsOrderedByRank() {
    $orderedArray = array();
    foreach($this->getItems() as $key => $val) {
      $orderedArray[WowCharacterItem::$slotToRankTranslationTable[$key]] = $val;
    }
    return $orderedArray;
  }

  protected function _getItems() {
    $slots = array();
    foreach($this->getWowCharacterItemsJoinWowItem() as $wowCharacterItem) {
      $slots[$wowCharacterItem->getSlot()] = $wowCharacterItem;
    }
    $this->wowCharacterItemSlots = $slots;
    return $this->wowCharacterItemSlots;
  }

  public function getWowCharacterItemBySlot($slot) {
    return ($this->getItems() && isset($this->wowCharacterItemSlots[$slot])) ? $this->wowCharacterItemSlots[$slot] : null;
  }

  public function getWowCharacterItemByName($itemName) {
    return ($key = $this->getItemSlotByName($itemName)) ? $this->getWowCharacterItemBySlot($key) : null;
  }

  protected function getItemSlotByName($itemName) {
    return array_search($itemName, $this->translationTable);
  }
  
} // WowCharacter
